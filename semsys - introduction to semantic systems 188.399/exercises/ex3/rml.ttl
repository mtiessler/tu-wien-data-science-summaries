@base <http://semantics.id/ns/example/film#> .
@prefix : <http://semantics.id/ns/example/film#> .

@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix schema: <http://schema.org/> .
@prefix dbo: <http://dbpedia.org/ontology/> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .

<#FilmMapping>
    rml:logicalSource [
        rml:source "1000_movies_metadata.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.[*]"
    ];
    rr:subjectMap [
        # can't add 10 to id, so we add 0 as suffix
        rr:template "http://semantics.id/ns/example#film_{id}0000";
        rr:class :Film ;
        rr:class owl:NamedIndividual
    ];
    rr:predicateObjectMap [
        rr:predicate :originalTitle;
        rr:objectMap [ rml:reference "original_title" ]
    ], [
        rr:predicate :hasSpokenLanguage;
        rr:objectMap [ rml:reference "spoken_languages[*].name" ]
    ], [
        rr:predicate :hasProductionCountry;
        rr:objectMap [ rml:reference "production_countries[*].name" ]
    ], [
        rr:predicate :hasFilmStudio;
        rr:objectMap [
            rr:template "http://semantics.id/ns/example#{production_companies[*].name}";
            rr:termType rr:IRI
        ]
    ], [
        rr:predicate :hasGenre;
        rr:objectMap [
            rr:template "http://semantics.id/ns/example/film#genre_{genres[*].name}";
            rr:termType rr:IRI
        ]
    ], [
        rr:predicate :hasDirector;
        rr:objectMap [
            rr:parentTriplesMap <#DirectorMapping>;
                rr:joinCondition [
                rr:child "id";
                rr:parent "id"
            ]
        ]
    ], [
        rr:predicate :hasScriptWriter;
        rr:objectMap [
            rr:parentTriplesMap <#ScriptWriterMapping>;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id"
            ]
        ]
    ], [
        rr:predicate :hasEditor;
        rr:objectMap [
            rr:parentTriplesMap <#EditorMapping>;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id"
            ]
        ]
    ], [
        rr:predicate :hasActor;
        rr:objectMap [
            rr:parentTriplesMap <#ActorMapping>;
            rr:joinCondition [
                rr:child "id";
                rr:parent "id"
            ]
        ]
    ], [
        rr:predicate :hasCast;
        rr:objectMap [
            rr:template "http://semantics.id/ns/example#cast_{cast[*].credit_id}";
            rr:termType rr:IRI
        ]
    ].

<#GenreMapping>
    rml:logicalSource [
        rml:source "1000_movies_metadata.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.[*].genres[*]"
    ];
    rr:subjectMap [
        # can't lowercase name
        rr:template "http://semantics.id/ns/example/film#genre_{name}" ;
        rr:class :Genre ;
        rr:class owl:NamedIndividual
    ];
    rr:predicateObjectMap [
        rr:predicate :id;
        rr:objectMap [ 
            rml:reference "id";
            rr:datatype xsd:integer
        ]
    ], [
        rr:predicate rdfs:label;
        rr:objectMap [ rml:reference "name" ]
    ].

<#FilmStudioMapping>
    rml:logicalSource [
        rml:source "1000_movies_metadata.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.[*].production_companies[*]"
    ];
    rr:subjectMap [
        # html encoding of name looks weird, don't have any other choice
        rr:template "http://semantics.id/ns/example#{name}";
        rr:class :FilmStudio ;
        rr:class owl:NamedIndividual
    ];
    rr:predicateObjectMap [
        rr:predicate :id;
        rr:objectMap [ 
            rml:reference "id";
            rr:datatype xsd:integer
        ]
    ], [
        rr:predicate rdfs:label;
        rr:objectMap [ rml:reference "name" ]
    ].

<#CastMapping>
    # unique actor-role pairs for each film
    rml:logicalSource [
        rml:source "1000_credits.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.[*].cast[*]"
    ];
    rr:subjectMap [
        # no named individuals for reference in `film.ttl` we can use an arbitrary template
        rr:template "http://semantics.id/ns/example#cast_{credit_id}";
        rr:class :Cast ;
        rr:class owl:NamedIndividual
    ];
    rr:predicateObjectMap [
        rr:predicate :hasCastCharacter;
        rr:objectMap [ rml:reference "character" ]
    ], [
        rr:predicate :hasCastActor;
        rr:objectMap [
            rr:template "http://semantics.id/ns/example#{name}";
            rr:termType rr:IRI
        ]
    ].

<#ActorMapping>
    rml:logicalSource [
        rml:source "1000_credits.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.[*].cast[*]"
    ];
    rr:subjectMap [
        # inconcistent nameing in `film.ttl`, sometimes the path is `/ns/example#{name}` other times `/ns/example/film#{name}`
        rr:template "http://semantics.id/ns/example#{name}";
        rr:class :Actor ;
        rr:class owl:NamedIndividual
    ];
    rr:predicateObjectMap [
        rr:predicate :fullName;
        rr:objectMap [ rml:reference "name" ]
    ], [
        rr:predicate :gender;
        rr:objectMap [
            # not sure what numeric mapping means in data
            rml:reference "gender";
            rr:datatype xsd:string
        ]
    ].

<#DirectorMapping>
    rml:logicalSource [
        rml:source "1000_credits.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.[*].crew[?(@.job=='Director')]"
    ];
    rr:subjectMap [
        rr:template "http://semantics.id/ns/example#{name}";
        rr:class :Director ;
        rr:class owl:NamedIndividual
    ];
    rr:predicateObjectMap [
        rr:predicate :fullName;
        rr:objectMap [ rml:reference "name" ]
    ], [
        rr:predicate :gender;
        rr:objectMap [ 
        rml:reference "gender";
        rr:datatype xsd:string
        ]
    ].

<#ScriptWriterMapping>
    rml:logicalSource [
        rml:source "1000_credits.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.[*].crew[?(@.job=='Writer')]"
    ];
    rr:subjectMap [
        rr:template "http://semantics.id/ns/example#{name}";
        rr:class :ScriptWriter ;
        rr:class owl:NamedIndividual
    ];
    rr:predicateObjectMap [
        rr:predicate :fullName;
        rr:objectMap [ rml:reference "name" ]
    ], [
        rr:predicate :gender;
        rr:objectMap [ 
        rml:reference "gender";
        rr:datatype xsd:string
        ]
    ].

<#EditorMapping>
    rml:logicalSource [
        rml:source "1000_credits.json";
        rml:referenceFormulation ql:JSONPath;
        rml:iterator "$.[*].crew[?(@.job=='Editor')]"
    ];
    rr:subjectMap [
        rr:template "http://semantics.id/ns/example#{name}";
        rr:class :Editor ;
        rr:class owl:NamedIndividual
    ];
    rr:predicateObjectMap [
        rr:predicate :fullName;
        rr:objectMap [ rml:reference "name" ]
    ], [
        rr:predicate :gender;
        rr:objectMap [ 
        rml:reference "gender";
        rr:datatype xsd:string
        ]
    ].
