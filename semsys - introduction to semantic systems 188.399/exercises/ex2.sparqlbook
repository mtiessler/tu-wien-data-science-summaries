[
  {
    "kind": 1,
    "language": "markdown",
    "value": "# Introduction to Semantic Systems Assignment 2 (2024W)",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "# Task 1 Basic SPARQL on a didactic ontology (10 points)",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "<!-- Created with WebVOWL (version 1.1.7), http://vowl.visualdataweb.org -->\n<svg class=\"vowlGraph\" width=\"1310.4\" height=\"1738\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"><g style=\"opacity: 1;\" transform=\"translate(-67.94656147022033,-93.46131650552843)scale(1.0403722847709418)\"><g class=\"linkContainer\"><defs></defs><defs><marker id=\"marker1\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker4\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker7\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker11\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker13\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker15\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker19\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker22\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker24\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker25\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker26\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L 12,-8L12,8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker27\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker28\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"white\" style=\"fill: rgb(255, 255, 255); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker29\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"white\" style=\"fill: rgb(255, 255, 255); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker31\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"white\" style=\"fill: rgb(255, 255, 255); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker32\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"white\" style=\"fill: rgb(255, 255, 255); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker34\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker36\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"white\" style=\"fill: rgb(255, 255, 255); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker38\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"white\" style=\"fill: rgb(255, 255, 255); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker39\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"white\" style=\"fill: rgb(255, 255, 255); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker40\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker41\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker14\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker43\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker6\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker42\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker><marker id=\"marker44\" viewBox=\"-14 -10 28 20\" markerWidth=\"10\" markerHeight=\"10\" orient=\"auto\"><path d=\"M0,0L -12,8L-12,-8L0,0\" class=\"filled\" style=\"fill: rgb(0, 0, 0); stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 100;\"></path></marker></defs><g class=\"link\" marker-end=\"url(#marker1)\"><path class=\"link-path node2 node3 normal\" d=\"M538.6013214965385,882.0583915729359Q493.72479280357885,883.2896224725573,482.5056606303389,883.5974301974627Q471.286528457099,883.9052379223681,426.40999976413946,885.1364688219895\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker4)\"><path class=\"link-path node2 node5 normal\" d=\"M637.9911001146997,808.8263833485919Q674.2838870967208,702.2461946717797,683.3570838422261,675.6011475025766Q692.4302805877313,648.9561003333736,728.7230675697524,542.3759116565616\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker11)\"><path class=\"link-path node8 node12 normal\" d=\"M1076.2245474743772,729.228515031872Q1128.4408897232915,719.900376077505,1141.49497528552,717.5683413389132Q1154.5490608477485,715.2363066003214,1206.7654030966626,705.9081676459544\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker13)\"><path class=\"link-path node8 normal\" d=\"M1043.9543983919204,691.5247362020423Q1130.236268471473,610.9860319933156,1151.2043846564734,636.8983691083547Q1172.1725008414737,662.8107062233938,1075.406572669421,730.393241874601\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker15)\"><path class=\"link-path node0 node16 normal\" d=\"M422.2814101126555,390.63279315389656Q406.6583508807663,341.72875000905583,402.752586072794,329.50273922284566Q398.84682126482164,317.2767284366355,383.22376203293237,268.3726852917948\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker19)\"><path class=\"link-path node18 node20 normal\" d=\"M412.4428909482664,1311.2468279383402Q376.17570282334214,1345.9569792268926,367.1089057921111,1354.6345170490308Q358.04210876088007,1363.312054871169,321.7749206359559,1398.0222061597212\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker22)\"><path class=\"link-path node2 node0 normal\" d=\"M585.6598684982005,810.2604867392993Q539.7180269959716,696.2314377036068,528.2325666204144,667.7241754446837Q516.7471062448573,639.2169131857606,470.8052647426285,525.1878641500682\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker24)\"><path class=\"link-path node2 node23 normal\" d=\"M675.6126702417498,922.731504980299Q762.9572954526308,983.0756855433672,784.793451755351,998.1617306841342Q806.6296080580713,1013.2477758249013,893.9742332689523,1073.5919563879693\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker25)\" marker-start=\"url(#marker26)\"><path class=\"link-path node2 normal\" d=\"M577.3633472950828,815.3535675094067Q565.9801344882148,724.8436943852007,615.4326690888907,725.3798949730666Q664.8852036895667,725.9160955609325,651.5421491960967,816.1578683912056\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker27)\"><path class=\"link-path node2 node10 normal\" d=\"M679.0324237748092,917.2995668021102Q789.7029716139319,980.5439904648402,817.3706085737126,996.3550963805228Q845.0382455334933,1012.1662022962054,955.7087933726159,1075.4106259589355\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker28)\"><path class=\"link-path node5 node8 dotted\" d=\"M804.3773705506017,524.0837005871172Q878.3621692595065,595.5555185872885,896.8583689367326,613.4234730873313Q915.3545686139588,631.2914275873742,989.3393673228636,702.7632455875455\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 3;\"></path></g><g class=\"link\" marker-end=\"url(#marker29)\"><path class=\"link-path node30 node8 dotted\" d=\"M922.4199600612118,1108.6401577001893Q958.3654008078316,980.1092233617803,967.3517609944865,947.9764897771781Q976.3381211811414,915.8437561925759,1012.2835619277613,787.3128218541669\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 3;\"></path></g><g class=\"link\" marker-end=\"url(#marker31)\"><path class=\"link-path node10 node8 dotted\" d=\"M1021.4559516451882,1037.923376159883Q1022.9707595939192,938.4306100318345,1023.3494615811019,913.5574184998223Q1023.7281635682846,888.6842269678102,1025.2429715170156,789.1914608397616\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 3;\"></path></g><g class=\"link\" marker-end=\"url(#marker32)\"><path class=\"link-path node23 node8 dotted\" d=\"M960.6877236425929,1047.0326323234121Q982.5983589965984,943.456847167057,988.0760178350998,917.5629008779682Q993.5536766736012,891.6689545888794,1015.4643120276068,788.0931694325243\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 3;\"></path></g><g class=\"link\" marker-end=\"url(#marker34)\"><path class=\"link-path node2 node35 normal\" d=\"M560.6315707712969,826.7960566644539Q518.7260237861723,784.8307524086581,508.2496370398911,774.3394263447092Q497.77325029361,763.8481002807603,455.86770330848543,721.8827960249644\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker36)\"><path class=\"link-path node30 node37 dotted\" d=\"M864.7816566709491,1249.2954676029226Q814.9456422036284,1339.4181862979754,802.4866385867982,1361.9488659717385Q790.0276349699681,1384.4795456455017,740.1916205026473,1474.6022643405545\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 3;\"></path></g><g class=\"link\" marker-end=\"url(#marker38)\"><path class=\"link-path node2 node18 dotted\" d=\"M584.9182330740883,949.4289973565427Q538.490789357386,1061.2113421409704,526.8839284282104,1089.1569283370773Q515.2770674990348,1117.1025145331841,468.84962378233246,1228.884859317612\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 3;\"></path></g><g class=\"link\" marker-end=\"url(#marker39)\"><path class=\"link-path node17 node18 dotted\" d=\"M253.1312829605482,1051.417509618079Q318.17346170583096,1125.8800292127835,334.4340063921517,1144.4956591114596Q350.6945510784724,1163.1112890101358,415.7367298237551,1237.5738086048405\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2; stroke-dasharray: 3;\"></path></g><g class=\"link\" marker-end=\"url(#marker40)\"><path class=\"link-path node2 node21 normal\" d=\"M543.6845378447247,852.7481497690751Q438.7045673975623,811.9252980139045,412.4595747857717,801.7195850751118Q386.21458217398106,791.5138721363192,281.2346117268188,750.6910203811484\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker41)\"><path class=\"link-path node18 node37 normal\" d=\"M486.93802565287757,1310.3851889737866Q563.307330258887,1380.1638294278303,582.3996564103893,1397.6084895413412Q601.4919825618916,1415.0531496548522,677.861287167901,1484.8317901088958\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker14)\"><path class=\"link-path node8 normal\" d=\"M994.5440332610871,699.347621444121Q968.1177797353093,585.947341948285,1001.0394727302339,580.7249630402537Q1033.9611657251585,575.5025841322223,1043.926572753474,691.5140530820739\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker43)\"><path class=\"link-path node8 node33 normal\" d=\"M1046.6892360117397,691.5738068553534Q1072.7386381932315,632.8159947870323,1079.2509887386045,618.126541769952Q1085.7633392839775,603.4370887528718,1111.8127414654696,544.6792766845507\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker6)\"><path class=\"link-path node2 node8 normal\" d=\"M684.8514784437206,855.5430254092186Q802.027832373663,815.2398896562094,831.3219208561486,805.1641057179571Q860.6160093386342,795.0883217797049,977.7923632685767,754.7851860266958\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker42)\"><path class=\"link-path node2 node30 normal\" d=\"M665.6176050767042,934.4289982798127Q738.9816402728633,1011.4302290071097,757.322649071903,1030.680536688934Q775.6636578709428,1049.9308443707582,849.0276930671018,1126.932075098055\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker44)\"><path class=\"link-path node2 node17 normal\" d=\"M542.5194552800997,904.0346147671837Q432.6730376040762,941.1012542695504,405.21143318507035,950.3679141451421Q377.74982876606447,959.6345740207338,267.903411090041,996.7012135231005\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g><g class=\"link\" marker-end=\"url(#marker7)\"><path class=\"link-path node8 node9 normal\" d=\"M1071.4146777219712,761.440998858731Q1119.958355855016,786.2966789412304,1132.094275388277,792.5105989618553Q1144.2301949215382,798.7245189824802,1192.773873054583,823.5801990649796\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path></g></g><g class=\"cardinalityContainer\"></g><g class=\"labelContainer\"><g class=\"labelGroup\" transform=\"translate(334.4340063921517,1144.4956591114596)\"><g class=\"label\" id=\"39\"><rect class=\"subclass property object,anonymous\" x=\"-41\" y=\"-14\" width=\"82\" height=\"28\" style=\"fill: rgb(255, 255, 255);\"><title>Subclass of</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">Subclass of</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(526.8839284282104,1089.1569283370773)\"><g class=\"label\" id=\"38\"><rect class=\"subclass property object,anonymous\" x=\"-41\" y=\"-14\" width=\"82\" height=\"28\" style=\"fill: rgb(255, 255, 255);\"><title>Subclass of</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">Subclass of</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(802.4866385867982,1361.9488659717385)\"><g class=\"label\" id=\"36\"><rect class=\"subclass property object,anonymous\" x=\"-41\" y=\"-14\" width=\"82\" height=\"28\" style=\"fill: rgb(255, 255, 255);\"><title>Subclass of</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">Subclass of</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(988.0760178350998,917.5629008779682)\"><g class=\"label\" id=\"32\"><rect class=\"subclass property object,anonymous\" x=\"-41\" y=\"-14\" width=\"82\" height=\"28\" style=\"fill: rgb(255, 255, 255);\"><title>Subclass of</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">Subclass of</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(1023.3494615811019,913.5574184998223)\"><g class=\"label\" id=\"31\"><rect class=\"subclass property object,anonymous\" x=\"-41\" y=\"-14\" width=\"82\" height=\"28\" style=\"fill: rgb(255, 255, 255);\"><title>Subclass of</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">Subclass of</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(967.3517609944865,947.9764897771781)\"><g class=\"label\" id=\"29\"><rect class=\"subclass property object,anonymous\" x=\"-41\" y=\"-14\" width=\"82\" height=\"28\" style=\"fill: rgb(255, 255, 255);\"><title>Subclass of</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">Subclass of</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(896.8583689367326,613.4234730873313)\"><g class=\"label\" id=\"28\"><rect class=\"subclass property object,anonymous\" x=\"-41\" y=\"-14\" width=\"82\" height=\"28\" style=\"fill: rgb(255, 255, 255);\"><title>Subclass of</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">Subclass of</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(482.5056606303389,883.5974301974627)\"><g class=\"label\" id=\"1\"><rect class=\"datatypeproperty property datatype\" x=\"-42\" y=\"-14\" width=\"84\" height=\"28\" style=\"fill: rgb(153, 204, 102);\"><title>releaseYear</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">releaseYear</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(683.3570838422261,675.6011475025766)\"><g class=\"label\" id=\"4\"><rect class=\"objectproperty property object\" x=\"-40.5\" y=\"-14\" width=\"81\" height=\"28\" style=\"fill: rgb(170, 204, 255);\"><title>hasDirector</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">hasDirector</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(1141.49497528552,717.5683413389132)\"><g class=\"label\" id=\"11\"><rect class=\"datatypeproperty property datatype\" x=\"-29.5\" y=\"-14\" width=\"59\" height=\"28\" style=\"fill: rgb(153, 204, 102);\"><title>gender</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-11.658447265625px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">gender</tspan><tspan class=\"text subtext\" x=\"0\" dy=\"10px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 9px; pointer-events: none;\">(functional)</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(1151.2043846564734,636.8983691083547)\"><g class=\"label\" id=\"13\"><rect class=\"objectproperty property object\" x=\"-27\" y=\"-14\" width=\"54\" height=\"28\" style=\"fill: rgb(51, 102, 204);\"><title>knows</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(255, 255, 255); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">knows</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(402.752586072794,329.50273922284566)\"><g class=\"label\" id=\"15\"><rect class=\"datatypeproperty property datatype\" x=\"-53\" y=\"-14\" width=\"106\" height=\"28\" style=\"fill: rgb(153, 204, 102);\"><title>establishedDate</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-11.658447265625px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">establishedDate</tspan><tspan class=\"text subtext\" x=\"0\" dy=\"10px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 9px; pointer-events: none;\">(functional)</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(367.1089057921111,1354.6345170490308)\"><g class=\"label\" id=\"19\"><rect class=\"datatypeproperty property datatype\" x=\"-31.5\" y=\"-14\" width=\"63\" height=\"28\" style=\"fill: rgb(153, 204, 102);\"><title>duration</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">duration</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(528.2325666204144,667.7241754446837)\"><g class=\"label\" id=\"22\"><rect class=\"objectproperty property object\" x=\"-48\" y=\"-14\" width=\"96\" height=\"28\" style=\"fill: rgb(170, 204, 255);\"><title>hasFilmStudio</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">hasFilmStudio</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(784.793451755351,998.1617306841342)\"><g class=\"label\" id=\"24\"><rect class=\"objectproperty property object\" x=\"-47.5\" y=\"-14\" width=\"95\" height=\"28\" style=\"fill: rgb(170, 204, 255);\"><title>hasComposer</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">hasComposer</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(615.4326690888907,725.3798949730666)\"><g class=\"label\" id=\"25\" transform=\"translate(0,-15)\"><rect class=\"objectproperty property object\" x=\"-30\" y=\"-14\" width=\"60\" height=\"28\" style=\"fill: rgb(170, 204, 255);\"><title>prequel</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-11.658447265625px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">prequel</tspan><tspan class=\"text subtext\" x=\"0\" dy=\"10px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 9px; pointer-events: none;\">(transitive)</tspan></text></g><g class=\"label\" id=\"26\" transform=\"translate(0,15)\"><rect class=\"objectproperty property object\" x=\"-28\" y=\"-14\" width=\"56\" height=\"28\" style=\"fill: rgb(170, 204, 255);\"><title>sequel</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-11.658447265625px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">sequel</tspan><tspan class=\"text subtext\" x=\"0\" dy=\"10px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 9px; pointer-events: none;\">(transitive)</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(817.3706085737126,996.3550963805228)\"><g class=\"label\" id=\"27\"><rect class=\"objectproperty property object\" x=\"-51\" y=\"-14\" width=\"102\" height=\"28\" style=\"fill: rgb(170, 204, 255);\"><title>hasScriptWriter</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">hasScriptWriter</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(508.2496370398911,774.3394263447092)\"><g class=\"label\" id=\"34\"><rect class=\"datatypeproperty property datatype\" x=\"-28.5\" y=\"-14\" width=\"57\" height=\"28\" style=\"fill: rgb(153, 204, 102);\"><title>budget</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-7.034154891967773px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">budget</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(412.4595747857717,801.7195850751118)\"><g class=\"label\" id=\"40\"><rect class=\"objectproperty property object\" x=\"-36.5\" y=\"-14\" width=\"73\" height=\"28\" style=\"fill: rgb(170, 204, 255);\"><title>hasGenre</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">hasGenre</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(582.3996564103893,1397.6084895413412)\"><g class=\"label\" id=\"41\"><rect class=\"objectproperty property object\" x=\"-46.5\" y=\"-14\" width=\"93\" height=\"28\" style=\"fill: rgb(170, 204, 255);\"><title>hasPerformer</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">hasPerformer</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(1001.0394727302339,580.7249630402537)\"><g class=\"label\" id=\"14\"><rect class=\"objectproperty property object\" x=\"-31.5\" y=\"-14\" width=\"63\" height=\"28\" style=\"fill: rgb(170, 204, 255);\"><title>friendOf</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-11.671670913696289px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">friendOf</tspan><tspan class=\"text subtext\" x=\"0\" dy=\"10px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 9px; pointer-events: none;\">(symmetric)</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(1079.2509887386045,618.126541769952)\"><g class=\"label\" id=\"43\"><rect class=\"datatypeproperty property datatype\" x=\"-33.5\" y=\"-14\" width=\"67\" height=\"28\" style=\"fill: rgb(153, 204, 102);\"><title>fullName</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">fullName</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(831.3219208561486,805.1641057179571)\"><g class=\"label\" id=\"6\"><rect class=\"objectproperty property object\" x=\"-33.5\" y=\"-14\" width=\"67\" height=\"28\" style=\"fill: rgb(170, 204, 255);\"><title>hasCrew</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">hasCrew</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(757.322649071903,1030.680536688934)\"><g class=\"label\" id=\"42\"><rect class=\"objectproperty property object\" x=\"-33.5\" y=\"-14\" width=\"67\" height=\"28\" style=\"fill: rgb(170, 204, 255);\"><title>hasActor</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">hasActor</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(405.21143318507035,950.3679141451421)\"><g class=\"label\" id=\"44\"><rect class=\"objectproperty property object\" x=\"-50\" y=\"-14\" width=\"100\" height=\"28\" style=\"fill: rgb(170, 204, 255);\"><title>hasSoundtrack</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">hasSoundtrack</tspan></text></g></g><g class=\"labelGroup\" transform=\"translate(1132.094275388277,792.5105989618553)\"><g class=\"label\" id=\"7\"><rect class=\"datatypeproperty property datatype\" x=\"-40.5\" y=\"-14\" width=\"81\" height=\"28\" style=\"fill: rgb(153, 204, 102);\"><title>dateOfBirth</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-11.658447265625px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">dateOfBirth</tspan><tspan class=\"text subtext\" x=\"0\" dy=\"10px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 9px; pointer-events: none;\">(functional)</tspan></text></g></g></g><g class=\"nodeContainer\"><g class=\"node\" id=\"10\" transform=\"translate(1020.323005210218,1112.3354326747299)\"><circle class=\"class\" r=\"73.42068074395237\" style=\"fill: rgb(170, 204, 255); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>ScriptWriter</title></circle><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-13.475515365600586px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">ScriptWriter</tspan><tspan class=\"text instance-count\" x=\"0\" dy=\"13px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; fill: rgb(102, 102, 102); pointer-events: none;\">9</tspan></text></g><g class=\"node\" id=\"17\" transform=\"translate(219.58043502747023,1013.0073468617006)\"><circle class=\"class\" r=\"50\" style=\"fill: rgb(170, 204, 255); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>Soundtrack</title></circle><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">Soundtrack</tspan></text></g><g class=\"node\" id=\"21\" transform=\"translate(213.53736981204813,724.366051349922)\"><circle class=\"class\" r=\"71.63553233343869\" style=\"fill: rgb(170, 204, 255); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>Genre</title></circle><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-13.475515365600586px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">Genre</tspan><tspan class=\"text instance-count\" x=\"0\" dy=\"13px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; fill: rgb(102, 102, 102); pointer-events: none;\">7</tspan></text></g><g class=\"node\" id=\"23\" transform=\"translate(947.278885978337,1110.4187855166156)\"><circle class=\"class\" r=\"63.78889830934487\" style=\"fill: rgb(170, 204, 255); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>Composer</title></circle><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-13.475515365600586px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">Composer</tspan><tspan class=\"text instance-count\" x=\"0\" dy=\"13px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; fill: rgb(102, 102, 102); pointer-events: none;\">2</tspan></text></g><g class=\"node\" id=\"18\" transform=\"translate(449.28757775683306,1275.983971361219)\"><circle class=\"class\" r=\"50\" style=\"fill: rgb(170, 204, 255); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>Artwork</title></circle><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">Artwork</tspan></text></g><g class=\"node\" id=\"8\" transform=\"translate(1026.0193722110953,738.1973709668927)\"><circle class=\"class\" r=\"50\" style=\"fill: rgb(51, 102, 204); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>Person</title></circle><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(255, 255, 255); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-11.658447265625px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">Person</tspan><tspan class=\"text subtext\" x=\"0\" dy=\"10px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 9px; pointer-events: none;\">(external)</tspan></text></g><g class=\"node\" id=\"3\" transform=\"translate(396.910375917901,885.9458194884638)\"><rect class=\"class datatype\" x=\"-28.5\" y=\"-10\" width=\"57\" height=\"20\" style=\"fill: rgb(255, 204, 51); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>integer</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-7.034155368804932px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">integer</tspan></text></g><g class=\"node\" id=\"33\" transform=\"translate(1116.651384200571,533.7650891529519)\"><rect class=\"class datatype\" x=\"-24.5\" y=\"-10\" width=\"49\" height=\"20\" style=\"fill: rgb(255, 204, 51); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>string</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-7.034155368804932px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">string</tspan></text></g><g class=\"node\" id=\"9\" transform=\"translate(1213.1941922993706,834.0359564746235)\"><rect class=\"class datatype\" x=\"-21.5\" y=\"-10\" width=\"43\" height=\"20\" style=\"fill: rgb(255, 204, 51); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>date</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">date</tspan></text></g><g class=\"node\" id=\"16\" transform=\"translate(379.7248143829017,257.4201129243184)\"><rect class=\"class datatype\" x=\"-21.5\" y=\"-10\" width=\"43\" height=\"20\" style=\"fill: rgb(255, 204, 51); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>date</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">date</tspan></text></g><g class=\"node\" id=\"20\" transform=\"translate(310.6038932411613,1408.713634720057)\"><rect class=\"class datatype\" x=\"-21.5\" y=\"-10\" width=\"43\" height=\"20\" style=\"fill: rgb(255, 204, 51); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>float</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">float</tspan></text></g><g class=\"node\" id=\"2\" transform=\"translate(613.7562032496656,879.9964448188776)\"><circle class=\"class\" r=\"74.18316218238697\" style=\"fill: rgb(170, 204, 255); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>Film</title></circle><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-13.475515365600586px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">Film</tspan><tspan class=\"text instance-count\" x=\"0\" dy=\"13px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; fill: rgb(102, 102, 102); pointer-events: none;\">10</tspan></text></g><g class=\"node\" id=\"35\" transform=\"translate(445.17534019907635,711.1751856157964)\"><rect class=\"class datatype\" x=\"-21.5\" y=\"-10\" width=\"43\" height=\"20\" style=\"fill: rgb(255, 204, 51); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>float</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">float</tspan></text></g><g class=\"node\" id=\"12\" transform=\"translate(1232.2498182979034,701.3555284542864)\"><rect class=\"class datatype\" x=\"-24.5\" y=\"-10\" width=\"49\" height=\"20\" style=\"fill: rgb(255, 204, 51); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>string</title></rect><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-7.034155368804932px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">string</tspan></text></g><g class=\"node\" id=\"37\" transform=\"translate(715.5117350639455,1519.2330077214635)\"><circle class=\"class\" r=\"50\" style=\"fill: rgb(170, 204, 255); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>Performer</title></circle><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-6.975515842437744px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">Performer</tspan></text></g><g class=\"node\" id=\"30\" transform=\"translate(901.8109671602253,1182.332204822647)\"><circle class=\"class\" r=\"75.51959485969229\" style=\"fill: rgb(170, 204, 255); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>Actor</title></circle><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-13.475515365600586px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">Actor</tspan><tspan class=\"text instance-count\" x=\"0\" dy=\"13px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; fill: rgb(102, 102, 102); pointer-events: none;\">12</tspan></text></g><g class=\"node\" id=\"5\" transform=\"translate(752.1367493535458,473.6174935342016)\"><circle class=\"class\" r=\"71.63553233343869\" style=\"fill: rgb(170, 204, 255); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>Director</title></circle><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-13.475515365600586px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">Director</tspan><tspan class=\"text instance-count\" x=\"0\" dy=\"13px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; fill: rgb(102, 102, 102); pointer-events: none;\">7</tspan></text></g><g class=\"node\" id=\"0\" transform=\"translate(444.06020333170835,458.8058076332334)\"><circle class=\"class\" r=\"70.56728119244251\" style=\"fill: rgb(170, 204, 255); stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>FilmStudio</title></circle><text class=\"text\" text-anchor=\"middle\" style=\"fill: rgb(0, 0, 0); font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\" y=\"-13.475515365600586px\"><tspan class=\"text\" x=\"0\" dy=\"12px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; pointer-events: none;\">FilmStudio</tspan><tspan class=\"text instance-count\" x=\"0\" dy=\"13px\" style=\"font-family: Helvetica, Arial, sans-serif; font-size: 12px; fill: rgb(102, 102, 102); pointer-events: none;\">6</tspan></text></g></g><g class=\"linkContainer hidden-in-export\" style=\"display: none;\"><g><line class=\"classNodeDragPath hidden\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: rgb(0, 0, 0); stroke-width: 2;\"></line></g><g><line class=\"classNodeDragPath hidden\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: rgb(0, 0, 0); stroke-width: 2;\"></line></g><g><line class=\"classNodeDragPath hidden\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" style=\"stroke: rgb(0, 0, 0); stroke-width: 2;\"></line></g><g><line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" class=\"hidden\" style=\"stroke: rgb(0, 0, 0); stroke-width: 2;\"></line></g></g><g class=\"editContainer hidden-in-export\" style=\"display: none;\"><g class=\"node hidden-in-export\" id=\"10001\" style=\"display: none;\"><g><path d=\"M 20,40 C 0,15 0,-15 20,-40 L -40,0 Z\" class=\"classDraggerNode hidden\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path><circle r=\"40\" cx=\"0\" cy=\"0\" class=\"superHiddenElement superOpacityElement hidden\"></circle></g></g><g class=\"node hidden-in-export\" id=\"10002\" style=\"display: none;\"><g><path d=\"M 61,40 C 41,15 41,-15 61,-40 L 1,0 Z\" class=\"classDraggerNode hidden\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path><circle r=\"40\" cx=\"0\" cy=\"0\" class=\"superHiddenElement superOpacityElement hidden\"></circle></g></g><g class=\"node hidden-in-export\" id=\"10002\" style=\"display: none;\"><g><path d=\"M 10,40 C -10,15 -10,-15 10,-40 -8.8233455,-13.641384 -36.711107,-5.1228436 -50,0 -36.696429,4.9079017 -8.6403157,13.745728 10,40 Z\" class=\"classDraggerNode hidden\" style=\"fill: none; stroke: rgb(0, 0, 0); stroke-width: 2;\"></path><circle r=\"40\" cx=\"0\" cy=\"0\" class=\"superHiddenElement superOpacityElement hidden\"></circle></g></g><g class=\"node hidden-in-export\" id=\"10003\" style=\"display: none;\"><g class=\"hidden\"></g></g></g><g class=\"editContainer hidden-in-export\" style=\"display: none;\"><g class=\"hidden-in-export hidden addDataPropertyElement\" transform=\"translate(0,0)\" style=\"display: none;\"><circle r=\"12\" cx=\"0\" cy=\"0\"><title>Add Datatype Property</title></circle><line x1=\"-8\" y1=\"0\" x2=\"8\" y2=\"0\" style=\"stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>Add Datatype Property</title></line><line x1=\"0\" y1=\"-8\" x2=\"0\" y2=\"8\" style=\"stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>Add Datatype Property</title></line><circle r=\"15\" cx=\"-7\" cy=\"7\" class=\"superHiddenElement superOpacityElement\"></circle></g><g class=\"hidden-in-export hidden deleteParentElement\" transform=\"translate(0,0)\" style=\"display: none;\"><circle r=\"12\" cx=\"0\" cy=\"0\"><title>Delete This Node</title></circle><line x1=\"-5\" y1=\"-5\" x2=\"5\" y2=\"5\" style=\"stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>Delete This Node</title></line><line x1=\"5\" y1=\"-5\" x2=\"-5\" y2=\"5\" style=\"stroke: rgb(0, 0, 0); stroke-width: 2;\"><title>Delete This Node</title></line><circle r=\"15\" cx=\"7\" cy=\"-7\" class=\"superHiddenElement superOpacityElement\"></circle></g></g></g></svg>",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "> Q1: __SELECT__ Return all actors with their names\n\nThis query selects bindings for `?actor` and `?name` by retrieving resources of type `:Actor` and their associated `:fullName` values.",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=http://localhost:7200/repositories/ISS_AS2]\nPREFIX : <http://semantics.id/ns/example/film#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT ?actor ?name\nWHERE {\n    ?actor rdf:type :Actor .\n    ?actor :fullName ?name .\n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output:\n\n| actor                                                 | name                   |\n|:------------------------------------------------------|:-----------------------|\n| http://semantics.id/ns/example#isabelle_huppert       | Isabelle Huppert       |\n| http://semantics.id/ns/example#annie_girardot         | Annie Girardot         |\n| http://semantics.id/ns/example#juliette_binoche       | Juliette Binoche       |\n| http://semantics.id/ns/example#jean-louis_trintignant | Jean-Louis Trintignant |\n| http://semantics.id/ns/example#ralph_fiennes          | Ralph Fiennes          |\n| http://semantics.id/ns/example#william_dafoe          | William Dafoe          |\n| http://semantics.id/ns/example/film#harrison_ford     | Harrison Ford          |\n| http://semantics.id/ns/example/film#ryan_gosling      | Ryan Gosling           |\n| http://semantics.id/ns/example/film#kathleen_quinlan  | Kathleen Quinlan       |\n| http://semantics.id/ns/example/film#david_keith       | David Keith            |\n| http://semantics.id/ns/example/film#will_smith        | Will Smith             |\n| http://semantics.id/ns/example/film#jeff_goldblum     | Jeff Goldblum          |\n",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "> Q2: __ASK__ Is there a film directed by Michael Haneke after 2020?\n\nThis `ASK` query checks if any resource of type `:Film` exists in the dataset with `:hasDirector` as Michael Haneke and a `:releaseYear` greater than 2020 by filtering the integer value of the year.",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=http://localhost:7200/repositories/ISS_AS2]\nPREFIX : <http://semantics.id/ns/example/film#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nASK {\n    # find any film in the dataset\n    ?film rdf:type :Film .\n    # that has Michael Haneke as director\n    ?film :hasDirector <http://semantics.id/ns/example#michael_haneke> .\n    # and get its release year\n    ?film :releaseYear ?year .\n    # check if the release year is (strictly) greater than 2020\n    FILTER (?year > xsd:integer(\"2020\"))\n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output: No",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "> Q3: __DESCRIBE__ Give me all information about the film 'Independence Day' released in 1996\n\nThe query uses a `DESCRIBE` clause to retrieve a concise RDF graph about the variable `?film`, filtered in the `WHERE` clause by its RDF type as `:Film`, its `rdfs:label` as the string \"Independence Day\", and its `:releaseYear` as the integer \"1996\".",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=http://localhost:7200/repositories/ISS_AS2]\nPREFIX : <http://semantics.id/ns/example/film#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nDESCRIBE ?film \nWHERE {\n    ?film rdf:type :Film .\n    ?film rdfs:label \"Independence Day\"^^xsd:string .\n    ?film :releaseYear \"1996\"^^xsd:integer .\n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output:\n\n```sparql\n@prefix : <http://semantics.id/ns/example/film#> .\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\n@prefix rdf4j: <http://rdf4j.org/schema/rdf4j#> .\n@prefix sesame: <http://www.openrdf.org/schema/sesame#> .\n@prefix owl: <http://www.w3.org/2002/07/owl#> .\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\n@prefix fn: <http://www.w3.org/2005/xpath-functions#> .\n\n<http://semantics.id/ns/example#film_10> a :Film, :Artwork, owl:NamedIndividual;\n  rdfs:label \"Independence Day\";\n  :hasActor :will_smith, :jeff_goldblum;\n  :hasPerformer :will_smith, :jeff_goldblum;\n  :hasCrew <http://semantics.id/ns/example#roland_emmerich>, <http://semantics.id/ns/example#dean_devlin>;\n  :hasDirector <http://semantics.id/ns/example#roland_emmerich>;\n  :hasFilmStudio <http://semantics.id/ns/example#twentieth_century_fox>;\n  :hasGenre :genre_science_fiction, :genre_action;\n  :hasScriptWriter <http://semantics.id/ns/example#roland_emmerich>, <http://semantics.id/ns/example#dean_devlin>;\n  :releaseYear 1996 .\n```",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "> Q4: __CONSTRUCT__ Return the directors and script writers who have worked together. You may use :collaboratedWith as the newly constructed property\n\nThis query uses the `CONSTRUCT` form to generate RDF triples that link directors to scriptwriters with the predicate `:collaboratedWith`, based on shared involvement in films, while ensuring type constraints and excluding cases where the director and writer are the same individual.",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=http://localhost:7200/repositories/ISS_AS2]\nPREFIX : <http://semantics.id/ns/example/film#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nCONSTRUCT {\n    ?director :collaboratedWith ?writer\n}\nWHERE {\n    # for each film find its director and script writer\n    ?film :hasDirector ?director .\n    ?film :hasScriptWriter ?writer .\n    # make sure they have the correct types\n    ?director rdf:type :Director .\n    ?writer rdf:type :ScriptWriter .\n    # and they are not the same person\n    FILTER (?director != ?writer)\n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output:\n\n| subject                                         | predicate                                            | object                                         |\n|:------------------------------------------------|:-----------------------------------------------------|:-----------------------------------------------|\n| http://semantics.id/ns/example#paul_verhoeven   | http://semantics.id/ns/example/film#collaboratedWith | http://semantics.id/ns/example#david_birke     |\n| http://semantics.id/ns/example#ridley_scott     | http://semantics.id/ns/example/film#collaboratedWith | http://semantics.id/ns/example#hampton_fancher |\n| http://semantics.id/ns/example#denis_villeneuve | http://semantics.id/ns/example/film#collaboratedWith | http://semantics.id/ns/example#hampton_fancher |\n| http://semantics.id/ns/example#ridley_scott     | http://semantics.id/ns/example/film#collaboratedWith | http://semantics.id/ns/example#david_peoples   |\n| http://semantics.id/ns/example#denis_villeneuve | http://semantics.id/ns/example/film#collaboratedWith | http://semantics.id/ns/example#michael_green   |\n| http://semantics.id/ns/example#robert_mandel    | http://semantics.id/ns/example/film#collaboratedWith | http://semantics.id/ns/example#alice_hoffman   |\n| http://semantics.id/ns/example#roland_emmerich  | http://semantics.id/ns/example/film#collaboratedWith | http://semantics.id/ns/example#dean_devlin     |\n",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "> Q5: __CONSTRUCT__ Return the directors and films where the director is both director and script writer. You may use :directorandwriterof as the newly constructed property\n\nThe query constructs triples where the same individual, identified as both the director and scriptwriter of a film, is linked to the film using the predicate `:directorandwriterof`, with the condition that the individual must have the RDF types `:Director` and `:ScriptWriter`.",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=http://localhost:7200/repositories/ISS_AS2]\nPREFIX : <http://semantics.id/ns/example/film#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nCONSTRUCT {\n    ?director :directorandwriterof ?film\n}\nWHERE {\n    ?film :hasDirector ?director .\n    ?film :hasScriptWriter ?writer .\n    ?director rdf:type :Director .\n    ?writer rdf:type :ScriptWriter .\n    # same as before but now they have to be the same person\n    FILTER (?director = ?writer)\n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output:\n\n| subject                                          | predicate                                               | object                                 |\n|:-------------------------------------------------|:--------------------------------------------------------|:---------------------------------------|\n| http://semantics.id/ns/example#michael_haneke    | http://semantics.id/ns/example/film#directorandwriterof | http://semantics.id/ns/example#film_1  |\n| http://semantics.id/ns/example#michael_haneke    | http://semantics.id/ns/example/film#directorandwriterof | http://semantics.id/ns/example#film_2  |\n| http://semantics.id/ns/example#michael_haneke    | http://semantics.id/ns/example/film#directorandwriterof | http://semantics.id/ns/example#film_3  |\n| http://semantics.id/ns/example#michael_haneke    | http://semantics.id/ns/example/film#directorandwriterof | http://semantics.id/ns/example#film_4  |\n| http://semantics.id/ns/example#anthony_minghella | http://semantics.id/ns/example/film#directorandwriterof | http://semantics.id/ns/example#film_5  |\n| http://semantics.id/ns/example#roland_emmerich   | http://semantics.id/ns/example/film#directorandwriterof | http://semantics.id/ns/example#film_10 |",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "> Q6: __FILTER__ Return all films with 'Blade Runner' in their titles\n\nThe query retrieves all resources typed as `:Film` with a `rdfs:label` containing the string \"Blade Runner\".",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=http://localhost:7200/repositories/ISS_AS2]\nPREFIX : <http://semantics.id/ns/example/film#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?film ?label\nWHERE {\n    ?film rdf:type :Film .\n    ?film rdfs:label ?label .\n    FILTER(CONTAINS(?label, \"Blade Runner\"))\n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output:\n\n| film                                  | label             |\n|:--------------------------------------|:------------------|\n| http://semantics.id/ns/example#film_7 | Blade Runner      |\n| http://semantics.id/ns/example#film_8 | Blade Runner 2049 |",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "> Q7: __FILTER__ Return all the names of directors who made any films in 1990 or earlier\n\nThis query retrieves distinct director names by matching films with directors and release years in the RDF graph, filtering for films released on or before 1990, and ensuring type compatibility using an explicit cast to `xsd:integer`.",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=http://localhost:7200/repositories/ISS_AS2]\nPREFIX : <http://semantics.id/ns/example/film#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT DISTINCT ?directorName # drop duplicates\nWHERE {\n    # get director and year from film\n    ?film :hasDirector ?director .\n    ?film :releaseYear ?year .\n    # get director's name to return\n    ?director :fullName ?directorName .\n    # filter movies released before 1990\n    FILTER (?year <= xsd:integer(\"1990\"))\n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output:\n\n| directorName   |\n|:---------------|\n| Ridley Scott   |\n| Robert Mandel  |",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "> Q8: __ORDER and GROUP__ Return the actor with number of films they starred in, in descending order\n\nThis query retrieves actors alongside the count of distinct films they appear in, grouped by actor and ordered in descending order of the film count.",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=http://localhost:7200/repositories/ISS_AS2]\nPREFIX : <http://semantics.id/ns/example/film#>\n\nSELECT ?actor (COUNT(DISTINCT ?film) as ?filmCount) # return number of distinct films per actor\nWHERE {\n    ?film :hasActor ?actor .\n}\nGROUP BY ?actor # group movies by actor\nORDER BY DESC(?filmCount) # sort by number of distinct films",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output:\n\n\n| actor                                                 |   filmCount |\n|:------------------------------------------------------|------------:|\n| http://semantics.id/ns/example#isabelle_huppert       |           4 |\n| http://semantics.id/ns/example#annie_girardot         |           2 |\n| http://semantics.id/ns/example#juliette_binoche       |           2 |\n| http://semantics.id/ns/example#jean-louis_trintignant |           2 |\n| http://semantics.id/ns/example/film#harrison_ford     |           2 |\n| http://semantics.id/ns/example#ralph_fiennes          |           1 |\n| http://semantics.id/ns/example#william_dafoe          |           1 |\n| http://semantics.id/ns/example/film#ryan_gosling      |           1 |\n| http://semantics.id/ns/example/film#kathleen_quinlan  |           1 |\n| http://semantics.id/ns/example/film#david_keith       |           1 |\n| http://semantics.id/ns/example/film#will_smith        |           1 |\n| http://semantics.id/ns/example/film#jeff_goldblum     |           1 |",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "> Q9: __ORDER and GROUP__ Return the number of actors in each film, in ascending order of their release year\n\nThe query retrieves distinct films along with their labels, release years, and the count of unique associated actors by filtering and grouping data based on film entities, with results sorted chronologically by release year.",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=http://localhost:7200/repositories/ISS_AS2]\nPREFIX : <http://semantics.id/ns/example/film#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?filmLabel (COUNT(DISTINCT ?actor) as ?actorCount) ?year # count distinct actors per film\nWHERE {\n    # for each film get all: label, year, actor\n    ?film rdf:type :Film .\n    ?film rdfs:label ?filmLabel .\n    ?film :releaseYear ?year .\n    ?film :hasActor ?actor .\n}\nGROUP BY ?filmLabel ?year # group by film and year\nORDER BY ?year # sort chronologically",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output:\n\n| filmLabel           |   actorCount | year   |\n|:--------------------|-------------:|:-------|\n| Blade Runner        |            1 | 1,982  |\n| Independence Day    |            2 | 1,983  |\n| The English Patient |            3 | 1,996  |\n| Independence Day    |            2 | 1,996  |\n| The Piano Teacher   |            2 | 2,001  |\n| Cache               |            2 | 2,005  |\n| Amour               |            2 | 2,012  |\n| Elle                |            1 | 2,016  |\n| Happy End           |            2 | 2,017  |\n| Blade Runner 2049   |            2 | 2,017  |",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "> Q10: __UNION__ Return a combined list of films and their directors, and films and their film studios\n\nThis query uses a `SELECT` statement with a `WHERE` clause containing a `UNION` block to retrieve either `(film, director)` pairs or `(film, studio)` pairs by matching RDF triples with specific patterns and applying property paths for director and studio labels.",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=http://localhost:7200/repositories/ISS_AS2]\nPREFIX : <http://semantics.id/ns/example/film#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?film ?director ?studio\nWHERE {\n    {\n        # only get (film, director) pairs\n        ?film rdf:type :Film .\n        ?film :hasDirector ?directorUri .\n        ?directorUri rdfs:label|:fullName ?director .\n    }\n    UNION\n    {\n        # only get (film, studio) pairs\n        ?film rdf:type :Film .\n        ?film :hasFilmStudio ?studioUri .\n        ?studioUri rdfs:label ?studio .\n    }\n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output:\n\n| film                                   | director          | studio               |\n|:---------------------------------------|:------------------|:---------------------|\n| http://semantics.id/ns/example#film_1  | Michael Haneke    |                      |\n| http://semantics.id/ns/example#film_2  | Michael Haneke    |                      |\n| http://semantics.id/ns/example#film_3  | Michael Haneke    |                      |\n| http://semantics.id/ns/example#film_4  | Michael Haneke    |                      |\n| http://semantics.id/ns/example#film_5  | Anthony Minghella |                      |\n| http://semantics.id/ns/example#film_6  | Paul Verhoeven    |                      |\n| http://semantics.id/ns/example#film_7  | Ridley Scott      |                      |\n| http://semantics.id/ns/example#film_8  | Denis Villeneuve  |                      |\n| http://semantics.id/ns/example#film_9  | Robert Mandel     |                      |\n| http://semantics.id/ns/example#film_10 | Roland Emmerich   |                      |\n| http://semantics.id/ns/example#film_1  |                   | MK2                  |\n| http://semantics.id/ns/example#film_3  |                   | Les Films du Losange |\n| http://semantics.id/ns/example#film_4  |                   | Les Films du Losange |\n| http://semantics.id/ns/example#film_5  |                   | Miramax Films        |\n| http://semantics.id/ns/example#film_6  |                   | SBS Productions      |\n| http://semantics.id/ns/example#film_7  |                   | Warner Bros.         |\n| http://semantics.id/ns/example#film_8  |                   | Warner Bros.         |\n| http://semantics.id/ns/example#film_9  |                   | Warner Bros.         |\n| http://semantics.id/ns/example#film_10 |                   | 20th Century Fox     |",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "# Task 2: Querying knowledge graphs on the web (7.5 points)",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "> Q11: List the names of all Actors who starred in the movie Star Wars IV: A New Hope and order by their age\n\nThe query retrieves a distinct list of actors who starred in the film \"Star Wars (film)\", along with their ages, by binding the difference between the current year and their birth year (adjusted for whether their birthday has occurred this year) to the variable `?age`, ensuring that only English-language labels for actor names are included, and orders the results in descending order of age.",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=https://dbpedia.org/sparql]\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\n\nSELECT DISTINCT ?actorName ?age # drop duplicates\nWHERE {\n    # get all actors in nodes named \"Star Wars (film)\"\n    dbr:Star_Wars_\\(film\\) dbo:starring ?actor .\n    ?actor rdfs:label ?actorName .\n    ?actor dbo:birthDate ?birthDate .\n    # calculate age\n    BIND(year(now()) - year(?birthDate) - if(month(now()) < month(?birthDate) || (month(now()) = month(?birthDate) && day(now()) < day(?birthDate)), 1, 0) as ?age)\n    # only use English names\n    FILTER(LANG(?actorName) = \"en\")\n}\nORDER BY DESC(?age) # sort descending by age",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output:\n\n| actorName | age |\n|---|---|\n| Peter Cushing | 111 |\n| Alec Guinness | 110 |\n| Harrison Ford | 82 |\n| Mark Hamill | 73 |\n| Carrie Fisher | 68 |\n",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "> Q12: ASK Is there a movie that Steven Spielberg and Tom Hanks both directed?\n\nThe query uses a boolean form to determine whether there exists at least one resource, bound to the variable `?movie`, that is explicitly typed as `dbo:Film` and simultaneously has both `dbr:Steven_Spielberg` and `dbr:Tom_Hanks` as its directors, leveraging RDF triples defined within the specified ontology and resource namespaces.",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=https://dbpedia.org/sparql]\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nASK {\n    ?movie rdf:type dbo:Film .\n    ?movie dbo:director dbr:Steven_Spielberg .\n    ?movie dbo:director dbr:Tom_Hanks .\n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output: No",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "> Q13: Count the number of movies released after 1970 with at least one writer with the first name \"Alex\" and the number of movies starring an actor with the first name \"Leo\" released before or in 1970. The result of the query should be the sum of the two amounts.\n\nThe query calculates the total count of distinct films that either (1) were written by individuals with a given name starting with \"Alex\" and released after 1970 or (2) starred actors with a given name starting with \"Leo\" and were released in or before 1970, combining the results of two subqueries using a `UNION`, where each subquery retrieves distinct films filtered based on their relationship with relevant properties and applies conditions on associated literals using `FILTER` expressions.",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=https://dbpedia.org/sparql]\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT (COUNT(DISTINCT ?movie1) + COUNT(DISTINCT ?movie2) AS ?total)\nWHERE {\n    {\n        SELECT DISTINCT ?movie1 WHERE {\n            ?movie1 rdf:type dbo:Film .\n            ?movie1 dbo:writer ?writer .\n            ?movie1 dbo:releaseDate ?date1 .\n            ?writer foaf:givenName ?writerName .\n            FILTER(REGEX(?writerName, \"^Alex\", \"i\"))\n            FILTER(YEAR(?date1) > 1970)\n        }\n    }\n    UNION\n    {\n        SELECT DISTINCT ?movie2 WHERE {\n            ?movie2 rdf:type dbo:Film .\n            ?movie2 dbo:starring ?actor .\n            ?movie2 dbo:releaseDate ?date2 .\n            ?actor foaf:givenName ?actorName .\n            FILTER(REGEX(?actorName, \"^Leo\", \"i\")) # `i` flag for case-insensitivity, `^` for start of string\n            FILTER(YEAR(?date2) <= 1970)\n        }\n    }\n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output:\n\n| total |\n|---|\n| 1 |\n\nNote: There are 3 movies where the names are not at the beginning of the string. But the strings should be structured as `<first name> <last name>`.",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "# Task 3: Querying with/without inference (7.5 points)",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "> Query Q31: Subproperty Pattern\n\nThis query leverages the subproperty relationship between `hasActor` and `hasPerformer`.\n\nWith inference disabled it does not return results since no triples directly use the `hasPerformer` property.\n\nWith inference enabled it returns all films and their actors because `hasActor` is defined as a subproperty of `hasPerformer`, so the reasoner infers `hasPerformer` relationships from existing hasActor triples.",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=http://localhost:7200/repositories/ISS_AS2?infer=False]\nPREFIX : <http://semantics.id/ns/example/film#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?film ?performer\nWHERE {\n    ?film :hasPerformer ?performer .\n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output:\n\n| film | performer |\n|---|---|\n",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=http://localhost:7200/repositories/ISS_AS2?infer=True]\nPREFIX : <http://semantics.id/ns/example/film#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?film ?performer\nWHERE {\n    ?film :hasPerformer ?performer .\n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output:\n\n| film | performer |\n|---|---|\n| http://semantics.id/ns/example#film_1 | http://semantics.id/ns/example#isabelle_huppert |\n| http://semantics.id/ns/example#film_1 | http://semantics.id/ns/example#annie_girardot |\n| http://semantics.id/ns/example#film_2 | http://semantics.id/ns/example#annie_girardot |\n| http://semantics.id/ns/example#film_2 | http://semantics.id/ns/example#juliette_binoche |\n| http://semantics.id/ns/example#film_3 | http://semantics.id/ns/example#isabelle_huppert |\n| http://semantics.id/ns/example#film_3 | http://semantics.id/ns/example#jean-louis_trintignant |\n| http://semantics.id/ns/example#film_4 | http://semantics.id/ns/example#isabelle_huppert |\n| http://semantics.id/ns/example#film_4 | http://semantics.id/ns/example#jean-louis_trintignant |\n| http://semantics.id/ns/example#film_5 | http://semantics.id/ns/example#juliette_binoche |\n| http://semantics.id/ns/example#film_5 | http://semantics.id/ns/example#ralph_fiennes |\n| http://semantics.id/ns/example#film_5 | http://semantics.id/ns/example#william_dafoe |\n| http://semantics.id/ns/example#film_6 | http://semantics.id/ns/example#isabelle_huppert |\n| http://semantics.id/ns/example#film_7 | http://semantics.id/ns/example/film#harrison_ford |\n| http://semantics.id/ns/example#film_8 | http://semantics.id/ns/example/film#harrison_ford |\n| http://semantics.id/ns/example#film_8 | http://semantics.id/ns/example/film#ryan_gosling |\n| http://semantics.id/ns/example#film_9 | http://semantics.id/ns/example/film#kathleen_quinlan |\n| http://semantics.id/ns/example#film_9 | http://semantics.id/ns/example/film#david_keith |\n| http://semantics.id/ns/example#film_10 | http://semantics.id/ns/example/film#will_smith |\n| http://semantics.id/ns/example#film_10 | http://semantics.id/ns/example/film#jeff_goldblum |\n",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "> Query Q32: Subclass Pattern\n\nWith inference disabled it only returns entities explicitly declared as Artwork (none).\n\nWith inference enabled it returns both explicit Artwork instances and Film instances, since Film is a subclass of Artwork.\n\nAdditionally, any resource that has the duration property will be inferred as Artwork since duration has Artwork as its domain.\n\nThe ontology defines these relationships through statements like: `:hasActor rdfs:subPropertyOf :hasPerformer`, `:Film rdfs:subClassOf :Artwork`, `:duration rdfs:domain :Artwork`.",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=http://localhost:7200/repositories/ISS_AS2?infer=False]\nPREFIX : <http://semantics.id/ns/example/film#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?artwork\nWHERE {\n    ?artwork rdf:type :Artwork .\n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output:\n\n| artwork |\n|---|\n",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=http://localhost:7200/repositories/ISS_AS2?infer=True]\nPREFIX : <http://semantics.id/ns/example/film#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT DISTINCT ?film ?performer\nWHERE {\n    ?film :hasPerformer ?performer .\n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output:\n\n| film | performer |\n|---|---|\n| http://semantics.id/ns/example#film_1 | http://semantics.id/ns/example#isabelle_huppert |\n| http://semantics.id/ns/example#film_1 | http://semantics.id/ns/example#annie_girardot |\n| http://semantics.id/ns/example#film_2 | http://semantics.id/ns/example#annie_girardot |\n| http://semantics.id/ns/example#film_2 | http://semantics.id/ns/example#juliette_binoche |\n| http://semantics.id/ns/example#film_3 | http://semantics.id/ns/example#isabelle_huppert |\n| http://semantics.id/ns/example#film_3 | http://semantics.id/ns/example#jean-louis_trintignant |\n| http://semantics.id/ns/example#film_4 | http://semantics.id/ns/example#isabelle_huppert |\n| http://semantics.id/ns/example#film_4 | http://semantics.id/ns/example#jean-louis_trintignant |\n| http://semantics.id/ns/example#film_5 | http://semantics.id/ns/example#juliette_binoche |\n| http://semantics.id/ns/example#film_5 | http://semantics.id/ns/example#ralph_fiennes |\n| http://semantics.id/ns/example#film_5 | http://semantics.id/ns/example#william_dafoe |\n| http://semantics.id/ns/example#film_6 | http://semantics.id/ns/example#isabelle_huppert |\n| http://semantics.id/ns/example#film_7 | http://semantics.id/ns/example/film#harrison_ford |\n| http://semantics.id/ns/example#film_8 | http://semantics.id/ns/example/film#harrison_ford |\n| http://semantics.id/ns/example#film_8 | http://semantics.id/ns/example/film#ryan_gosling |\n| http://semantics.id/ns/example#film_9 | http://semantics.id/ns/example/film#kathleen_quinlan |\n| http://semantics.id/ns/example#film_9 | http://semantics.id/ns/example/film#david_keith |\n| http://semantics.id/ns/example#film_10 | http://semantics.id/ns/example/film#will_smith |\n| http://semantics.id/ns/example#film_10 | http://semantics.id/ns/example/film#jeff_goldblum |\n",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "> Query Q33: Property Symmetry Pattern\n\nWith inference disabled, the query will return only two results showing the explicit `friendOf` relationships:\n\n- alice → bob\n- charlie → david\n\nWith inference enabled, the query will return four results due to the `owl:SymmetricProperty` declaration on `:friendOf`:\n\n- alice → bob\n- alice ← bob\n- charlie → david\n- charlie ← david\n\nThis demonstrates how the symmetric property pattern automatically infers bidirectional relationships when inference is enabled.\nThis means that when inference is enabled, for every triple (`A :friendOf B`), the triple (`B :friendOf A`) is automatically inferred, effectively making friendship relationships bidirectional in the graph 🌈✨❤️ - yay.",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=http://localhost:7200/repositories/ISS_AS2]\nPREFIX : <http://semantics.id/ns/example/film#>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nINSERT DATA {\n    :alice :friendOf :bob .\n    :charlie :friendOf :david .\n}\n",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=http://localhost:7200/repositories/ISS_AS2?infer=False]\nPREFIX : <http://semantics.id/ns/example/film#>\n\nSELECT ?person1 ?person2\nWHERE {\n    ?person1 :friendOf ?person2 .\n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output:\n\n| person1 | person2 |\n|---|---|\n| http://semantics.id/ns/example/film#alice | http://semantics.id/ns/example/film#bob |\n| http://semantics.id/ns/example/film#charlie | http://semantics.id/ns/example/film#david |\n",
    "metadata": {}
  },
  {
    "kind": 2,
    "language": "sparql",
    "value": "# [endpoint=http://localhost:7200/repositories/ISS_AS2?infer=True]\nPREFIX : <http://semantics.id/ns/example/film#>\n\nSELECT ?person1 ?person2\nWHERE {\n    ?person1 :friendOf ?person2 .\n}",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Output:\n\n| person1 | person2 |\n|---|---|\n| http://semantics.id/ns/example/film#alice | http://semantics.id/ns/example/film#bob |\n| http://semantics.id/ns/example/film#bob | http://semantics.id/ns/example/film#alice |\n| http://semantics.id/ns/example/film#charlie | http://semantics.id/ns/example/film#david |\n| http://semantics.id/ns/example/film#david | http://semantics.id/ns/example/film#charlie |\n",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "# Addendum",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "Utility code snippet to parse CSV files from GraphDB:\n\n```python\ncsvdata = \"\"\"\nfilm,director,studio\nhttp://semantics.id/ns/example#film_1,Michael Haneke,\n\"\"\"\n\nimport pandas as pd\nfrom io import StringIO\ndf = pd.read_csv(StringIO(csvdata))\nmarkdown_table = df.to_markdown(index=False)\nprint(markdown_table)\n```\n\nUtility code snippet to parse JSON output from sparqlbook results:\n\n```python\nimport json\n\nsparql_json = \"\"\"\n{\"head\":{\"vars\":[\"person1\",\"person2\"]},\"results\":{\"bindings\":[{\"person1\":{\"type\":\"uri\",\"value\":\"http://semantics.id/ns/example/film#alice\"},\"person2\":{\"type\":\"uri\",\"value\":\"http://semantics.id/ns/example/film#bob\"}},{\"person1\":{\"type\":\"uri\",\"value\":\"http://semantics.id/ns/example/film#bob\"},\"person2\":{\"type\":\"uri\",\"value\":\"http://semantics.id/ns/example/film#alice\"}},{\"person1\":{\"type\":\"uri\",\"value\":\"http://semantics.id/ns/example/film#charlie\"},\"person2\":{\"type\":\"uri\",\"value\":\"http://semantics.id/ns/example/film#david\"}},{\"person1\":{\"type\":\"uri\",\"value\":\"http://semantics.id/ns/example/film#david\"},\"person2\":{\"type\":\"uri\",\"value\":\"http://semantics.id/ns/example/film#charlie\"}}]}}\n\"\"\"\n\nsparql_json = json.loads(sparql_json) if isinstance(sparql_json, str) else sparql_json\n\nheaders = sparql_json[\"head\"][\"vars\"]\nrows = []\nfor binding in sparql_json[\"results\"][\"bindings\"]:\n    row = []\n    for header in headers:\n        row.append(binding[header][\"value\"])\n    rows.append(row)\n\nmarkdown_table = \"| \" + \" | \".join(headers) + \" |\\n\"\nmarkdown_table += \"|\" + \"|\".join([\"---\" for _ in headers]) + \"|\\n\"\nfor row in rows:\n    markdown_table += \"| \" + \" | \".join(row) + \" |\\n\"\n\nprint(markdown_table)\n```",
    "metadata": {}
  },
  {
    "kind": 1,
    "language": "markdown",
    "value": "",
    "metadata": {}
  }
]